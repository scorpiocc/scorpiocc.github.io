<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scorpio_cc -个人博客</title>
  <subtitle>做自己的太阳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scorpiocc.cn/"/>
  <updated>2017-06-12T07:31:20.442Z</updated>
  <id>http://scorpiocc.cn/</id>
  
  <author>
    <name>Scorpio_cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA 对象序列化——Serializable</title>
    <link href="http://scorpiocc.cn/2017/06/12/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E3%80%90Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%91JAVA%20%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E2%80%94%E2%80%94Serializable/"/>
    <id>http://scorpiocc.cn/2017/06/12/Java基础知识/【Java基础知识】JAVA 对象序列化——Serializable/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2017-06-12T07:31:20.442Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>Java的对象序列化是指将那些实现了Serializable接口的对象转换成一个字符序列，并能够在以后将这个字节序列完全恢复为原来的对象。这一过程甚至可通过网络进行，这意味着序列化机制能自动弥补不同操作系统之间的差异。 只要对象实现了Serializable接口（记住，这个接口只是一个标记接口，不包含任何的方法</p>
</li>
<li><p>如果我们想要序列化一个对象，首先要创建某些OutputStream(如FileOutputStream、ByteArrayOutputStream等)，然后将这些OutputStream封装在一个ObjectOutputStream中。这时候，只需要调用writeObject()方法就可以将对象序列化，并将其发送给OutputStream（<strong>记住：对象的序列化是基于字节的，不能使用Reader和Writer等基于字符的层次结构</strong>）。而反序列的过程（即将一个序列还原成为一个对象），需要将一个InputStream(如FileInputstream、ByteArrayInputStream等)封装在ObjectInputStream内，然后调用readObject()即可。</p>
</li>
<li><p>对象序列化过程不仅仅保存单个对象，还能追踪对象内所包含的所有引用，并保存那些对象（这些对象也需实现了Serializable接口）。下面这段代码演示了此过程：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> *只是一个简单的类，用于测试序列化</div><div class="line"> */</div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Data implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 7247714666080613254L;</div><div class="line">    public int n;</div><div class="line">    public Data(int n) &#123;</div><div class="line">        this.n = n;</div><div class="line">    &#125;</div><div class="line">    public String toString()&#123;</div><div class="line">        return Integer.toString(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * @author chenfei</div><div class="line"> *</div><div class="line"> * 用于测试序列化，每个对象Worm对象都与worm中的下一段链接，</div><div class="line"> * 同时又有属于不同类（Data）的对象引用数组链接</div><div class="line"> */</div><div class="line">public class Worm implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 5468335797443850679L;</div><div class="line">    private Data[] d = &#123;</div><div class="line">            new Data(random.nextInt(10)),</div><div class="line">            new Data(random.nextInt(10)),</div><div class="line">            new Data(random.nextInt(10))</div><div class="line">    &#125;;</div><div class="line">    private static Random random = new Random(47);</div><div class="line">    private Worm next;</div><div class="line">    private char c;</div><div class="line">    </div><div class="line">    public Worm(int i , char x) &#123;</div><div class="line">        System.out.println(&quot;Worm constructor:&quot; +i);</div><div class="line">        c = x;</div><div class="line">        if(--i &gt; 0) &#123;</div><div class="line">            next = new Worm(i , (char)(x+1));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public Worm() &#123;</div><div class="line">        System.out.println(&quot;Default constructor!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public String toString() &#123;</div><div class="line">        StringBuilder sb = new StringBuilder(&quot;:&quot;);</div><div class="line">        sb.append(c);</div><div class="line">        sb.append(&quot;(&quot;);</div><div class="line">        for(Data data : d) &#123;</div><div class="line">            sb.append(data);</div><div class="line">        &#125;</div><div class="line">        sb.append(&quot;)&quot;);</div><div class="line">        if(next!=null) &#123;</div><div class="line">            sb.append(next);</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.ByteArrayOutputStream;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.ObjectInputStream;</div><div class="line">import java.io.ObjectOutputStream;</div><div class="line"></div><div class="line"></div><div class="line">public class SerializableTest &#123;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws FileNotFoundException,</div><div class="line">        IOException, ClassNotFoundException &#123;</div><div class="line">        Worm w = new Worm(6 ,&apos;a&apos;);</div><div class="line">        System.out.println(&quot;序列化操纵之前&quot;);</div><div class="line">        System.out.println(&quot;w=&quot;+w);</div><div class="line">        </div><div class="line">        //序列化操作1--FileOutputStream</div><div class="line">        ObjectOutputStream oos1 = new ObjectOutputStream(new FileOutputStream(&quot;worm.out&quot;));</div><div class="line">        oos1.writeObject(&quot;Worm storage By FileOutputStream &quot;);</div><div class="line">        oos1.writeObject(w);//必须所有引用的对象都实现序列化（本例终究是Data这个类）</div><div class="line">        //否则抛出有java.io.NotSerializableException:这个异常</div><div class="line">        oos1.close();</div><div class="line">        </div><div class="line">        //反序列化操作1---FileInputStream</div><div class="line">        ObjectInputStream ois1 = new ObjectInputStream(new FileInputStream(&quot;worm.out&quot;));</div><div class="line">        String s1 = (String)ois1.readObject();</div><div class="line">        Worm w1 = (Worm)ois1.readObject();</div><div class="line">        ois1.close();</div><div class="line">        System.out.println(&quot;反序列化操作1之后&quot;);</div><div class="line">        System.out.println(s1);</div><div class="line">        System.out.println(&quot;w1:&quot;+w1);</div><div class="line">        </div><div class="line">        //序列化操作2--ByteArrayOutputStream</div><div class="line">        ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();</div><div class="line">        ObjectOutputStream oos2 = new ObjectOutputStream(byteOutStream);</div><div class="line">        oos2.writeObject(&quot;Worm storage By ByteOutputStream &quot;);</div><div class="line">        oos2.writeObject(w);</div><div class="line">        oos2.flush();</div><div class="line">        </div><div class="line">        //反序列操作2--ByteArrayInputStream</div><div class="line">        ByteArrayInputStream byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray());</div><div class="line">        ObjectInputStream ois2 = new ObjectInputStream(byteInStream);</div><div class="line">        String s2 = (String)ois2.readObject();</div><div class="line">        Worm w2 = (Worm)ois2.readObject();</div><div class="line">        ois2.close();</div><div class="line">        System.out.println(&quot;反序列化操作2之后&quot;);</div><div class="line">        System.out.println(s2);</div><div class="line">        System.out.println(&quot;w2:&quot;+w2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Worm constructor:6</div><div class="line">Worm constructor:5</div><div class="line">Worm constructor:4</div><div class="line">Worm constructor:3</div><div class="line">Worm constructor:2</div><div class="line">Worm constructor:1</div><div class="line">序列化操纵之前</div><div class="line">w=:a(853):b(119):c(802):d(788):e(199):f(881)</div><div class="line">反序列化操作1之后</div><div class="line">Worm storage By FileOutputStream </div><div class="line">w1::a(853):b(119):c(802):d(788):e(199):f(881)</div><div class="line">反序列化操作2之后</div><div class="line">Worm storage By ByteOutputStream </div><div class="line">w2::a(853):b(119):c(802):d(788):e(199):f(881)</div></pre></td></tr></table></figure></p>
<h4 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4><h5 id="1）反序列化后的对象，需要调用构造函数重新构造吗？"><a href="#1）反序列化后的对象，需要调用构造函数重新构造吗？" class="headerlink" title="1）反序列化后的对象，需要调用构造函数重新构造吗？"></a>1）反序列化后的对象，需要调用构造函数重新构造吗？</h5><pre><code>答案：不需要。对于Serializable对象，对象完全以它存储的二进制位作为基础来构造，而不调用构造器
</code></pre><p>请看下面这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * @author chenfei</div><div class="line"> * </div><div class="line"> * 用于测试序列化时的deep copy</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class House implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -6091530420906090649L;</div><div class="line">    </div><div class="line">    private Date date = new Date(); //记录当前的时间</div><div class="line">    </div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;House:&quot; + super.toString() + &quot;.Create Time is:&quot; + date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">public class Animal implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -213221189192962074L;</div><div class="line">    </div><div class="line">    private String name;</div><div class="line">    </div><div class="line">    private House house;</div><div class="line">    </div><div class="line">    public Animal(String name , House house) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.house = house;</div><div class="line">        System.out.println(&quot;调用了构造器&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public String toString() &#123;</div><div class="line">        return  name + &quot;[&quot; +super.toString() + &quot;&apos;]&quot; + house;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.ByteArrayOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.ObjectInputStream;</div><div class="line">import java.io.ObjectOutputStream;</div><div class="line"></div><div class="line"></div><div class="line">public class Myworld &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param args</div><div class="line">     * @throws IOException </div><div class="line">     * @throws ClassNotFoundException </div><div class="line">     */</div><div class="line">public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</div><div class="line">    House house = new House();</div><div class="line">    System.out.println(&quot;序列化前&quot;);</div><div class="line">    Animal animal = new Animal(&quot;test&quot;,house);</div><div class="line">    ByteArrayOutputStream out = new ByteArrayOutputStream();</div><div class="line">    ObjectOutputStream oos = new ObjectOutputStream(out);</div><div class="line">    oos.writeObject(animal);</div><div class="line">    oos.flush();</div><div class="line">    oos.close();</div><div class="line"></div><div class="line">    System.out.println(&quot;反序列化后&quot;);</div><div class="line">    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());</div><div class="line">    ObjectInputStream ois = new ObjectInputStream(in);</div><div class="line">    Animal animal1 = (Animal)ois.readObject();</div><div class="line">    ois.close();    </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果如下所示：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">序列化前</div><div class="line">调用了构造器</div><div class="line">反序列化后</div></pre></td></tr></table></figure></p>
<h6 id="从上面的结果中可以看到，在序列化前，当我们使用"><a href="#从上面的结果中可以看到，在序列化前，当我们使用" class="headerlink" title="从上面的结果中可以看到，在序列化前，当我们使用"></a>从上面的结果中可以看到，在序列化前，当我们使用</h6><p>Animal animal = new Animal(“test”,house);<br>时，调用了Animal的构造器（打印了输出语句），但是反序列后并没有再打印任何语句，说明并没有调用构造器。</p>
<h5 id="2）序列前的对象与序列化后的对象是什么关系？是-“-”还是equal？是浅复制还是深复制？"><a href="#2）序列前的对象与序列化后的对象是什么关系？是-“-”还是equal？是浅复制还是深复制？" class="headerlink" title="2）序列前的对象与序列化后的对象是什么关系？是(“==”还是equal？是浅复制还是深复制？)"></a>2）序列前的对象与序列化后的对象是什么关系？是(“==”还是equal？是浅复制还是深复制？)</h5><pre><code>答案：深复制，反序列化还原后的对象地址与原来的的地址不同。 我们还是看上面思考1）中给出的代码，
前两个类不变化，修改第三个类（MyWorld.java）的部分代码，修改后的代码如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package test.serializable;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.ByteArrayOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.ObjectInputStream;</div><div class="line">import java.io.ObjectOutputStream;</div><div class="line"></div><div class="line"></div><div class="line">public class Myworld &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param args</div><div class="line">     * @throws IOException </div><div class="line">     * @throws ClassNotFoundException </div><div class="line">     */</div><div class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</div><div class="line">        House house = new House();</div><div class="line">        System.out.println(&quot;序列化前&quot;);</div><div class="line">        Animal animal = new Animal(&quot;test&quot;,house);</div><div class="line">        System.out.println(animal);</div><div class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</div><div class="line">        ObjectOutputStream oos = new ObjectOutputStream(out);</div><div class="line">        oos.writeObject(animal);</div><div class="line">        oos.writeObject(animal);//在写一次，看对象是否是一样，</div><div class="line">        oos.flush();</div><div class="line">        oos.close();</div><div class="line">        </div><div class="line">        ByteArrayOutputStream out2 = new ByteArrayOutputStream();//换一个输出流</div><div class="line">        ObjectOutputStream oos2 = new ObjectOutputStream(out2);</div><div class="line">        oos2.writeObject(animal);</div><div class="line">        oos2.flush();</div><div class="line">        oos2.close();</div><div class="line"></div><div class="line">        System.out.println(&quot;反序列化后&quot;);</div><div class="line">        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());</div><div class="line">        ObjectInputStream ois = new ObjectInputStream(in);</div><div class="line">        Animal animal1 = (Animal)ois.readObject();</div><div class="line">        Animal animal2 = (Animal)ois.readObject();</div><div class="line">        ois.close();</div><div class="line">        </div><div class="line">        ByteArrayInputStream in2 = new ByteArrayInputStream(out2.toByteArray());</div><div class="line">        ObjectInputStream ois2 = new ObjectInputStream(in2);</div><div class="line">        Animal animal3 = (Animal)ois2.readObject();</div><div class="line">        ois2.close();</div><div class="line">        </div><div class="line">        System.out.println(&quot;out流：&quot; +animal1);</div><div class="line">        System.out.println(&quot;out流：&quot; +animal2);</div><div class="line">        System.out.println(&quot;out2流：&quot; +animal3);</div><div class="line">        </div><div class="line">        </div><div class="line">        System.out.println(&quot;测试序列化前后的对象 == ：&quot;+ (animal==animal1));</div><div class="line">        System.out.println(&quot;测试序列化后同一流的对象：&quot;+ (animal1 == animal2));</div><div class="line">        System.out.println(&quot;测试序列化后不同流的对象==:&quot; + (animal1==animal3));</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">序列化前</div><div class="line">调用了构造器</div><div class="line">test[test.serializable.Animal@bb7465&apos;]House:test.serializable.House@d6c16c.Create Time is:Sat Apr 06 00:11:30 CST 2013</div><div class="line">反序列化后</div><div class="line">out流：test[test.serializable.Animal@4f80d6&apos;]House:test.serializable.House@193722c.Create Time is:Sat Apr 06 00:11:30 CST 2013</div><div class="line">out流：test[test.serializable.Animal@4f80d6&apos;]House:test.serializable.House@193722c.Create Time is:Sat Apr 06 00:11:30 CST 2013</div><div class="line">（与上面的相同）</div><div class="line">out2流：test[test.serializable.Animal@12cc95d&apos;]House:test.serializable.House@157fb52.Create Time is:Sat Apr 06 00:11:30 CST 2013</div><div class="line">（与上面只是值相同，但是地址不一样。）</div><div class="line">测试序列化前后的对象 == ：false</div><div class="line">测试序列化后同一流的对象：true</div><div class="line">测试序列化后不同流的对象==:false</div></pre></td></tr></table></figure></p>
<p>从结果可以看到</p>
<p>序列化前后对象的地址不同了，但是内容是一样的，而且对象中包含的引用也相同。换句话说，通过序列化操作, <code>我们可以实现对任何可Serializable对象的”深度复制（deep copy）</code></p>
<p> <strong>——这意味着我们复制的是整个对象网，而不仅仅是基本对象及其引用。对于同一流的对象，他们地址是相同，说明他们是同一个对象，但是与其他流的对象地址却不相同</strong>。<br>也就说，只要将对象序列化到单一流中，就可以恢复出与我们写出时一样的对象网，而且只要在同一流中，对象都是同一个。</p>
<p> 补充：</p>
<pre><code>serialVersionUID 的作用？
</code></pre><ul>
<li>在Java中，软件的兼容性是一个大问题，尤其在使用到对象串行性的时候，那么在某一个对象已经被串行化了，可是这个对象又被修改后重新部署了，那么在这种情况下， 用老软件来读取新文件格式虽然不是什么难事，但是有可能丢失一些信息。 serialVersionUID来解决这些问题，新增的serialVersionUID必须定义成下面这种形式：static final long serialVersionUID=-2805284943658356093L;。其中数字后面加上的L表示这是一个long值。 通过这种方式来解决不同的版本之间的串行话问题。</li>
</ul>
<p>Java串行化机制定义的文件格式似乎很脆弱，只要稍微改动一下类的定义，原来保存的对象就可能无法读取。例如，下面是一个简单的类定义： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Save implements Serializable</div><div class="line">&#123;</div><div class="line">String name;</div><div class="line"></div><div class="line">public void save() throws IOException</div><div class="line">&#123;</div><div class="line">FileOutputStream f = new FileOutputStream(&quot;foo&quot;);</div><div class="line">ObjectOutputStream oos = new ObjectOutputStream(f);</div><div class="line">oos.writeObject(this);</div><div class="line">oos.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在这个类定义中增加一个域，例如final int val = 7;，再来读取原来保存的对象，就会出现下面的<code>异常</code>： </p>
<pre><code>  java.io.InvalidClassException:
Save; local class incompatible:
stream classdesc serialVersionUID = -2805284943658356093,
local class serialVersionUID = 3419534311899376629
</code></pre><p>上例异常信息中的数字串表示类定义里各种属性的编码值： </p>
<ul>
<li><p>类的名字（Save）。 </p>
</li>
<li><p>域的名字（name）。 </p>
</li>
<li><p>方法的名字（Save）。 </p>
</li>
<li><p>已实现的接口（Serializable）。 </p>
</li>
</ul>
<p>改动上述任意一项内容（无论是增加或删除），<code>都会引起编码值变化，从而引起类似的异常警报。这个数字序列称为“串行化版本统一标识符”（serial version universal identifier），简称UID。</code>解决这个问题的办法是在类里面新增一个域serialVersionUID，强制类仍旧使用原来的UID。新增的域必须是： </p>
<ul>
<li><p>static：该域定义的属性作用于整个类，而非特定的对象。 </p>
</li>
<li><p>final：保证代码运行期间该域不会被修改。 </p>
</li>
<li><p>long：它是一个64位的数值。 </p>
</li>
</ul>
<p><strong>也就是说，新增的serialVersionUID必须定义成下面这种形式：static final long serialVersionUID=-2805284943658356093L;。其中数字后面加上的L表示这是一个long值</strong>。 </p>
<p>当然，改动之后的类不一定能够和原来的对象兼容。例如，如果把一个域的定义从String改成了int，执行逆-串行化操作时系统就不知道如何处理该值，显示出错误信息：java.io.InvalidClassException: Save; incompatible types for field name。</p>
<h4 id="serialVersionUID-的作用介绍详解-点此跳转"><a href="#serialVersionUID-的作用介绍详解-点此跳转" class="headerlink" title="serialVersionUID 的作用介绍详解:点此跳转"></a>serialVersionUID 的作用介绍详解:<a href="http://www.360doc.com/content/09/1019/17/397210_7519829.shtml" target="_blank" rel="external">点此跳转</a></h4><p><a href="http://www.cnblogs.com/chenfei0801/archive/2013/04/05/3001149.html" target="_blank" rel="external">原文地址：点此跳转</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java的对象序列化是指将那些实现了Serializable接口的对象转换成一个字符序列，并能够在以后将这个字节序列完全恢复为原来的对象。这一过程甚至可通过网络进行，这意味着序列化机制能自动弥补不同操作系统之间的差异。 只要对象实现了Serializabl
    
    </summary>
    
      <category term="java基础知识" scheme="http://scorpiocc.cn/categories/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="对象序列化" scheme="http://scorpiocc.cn/tags/%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 面向切面编程详解</title>
    <link href="http://scorpiocc.cn/2017/05/19/Java%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/Spring%20AOP%20%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://scorpiocc.cn/2017/05/19/Java后台开发/Spring AOP 面向切面编程详解/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-05-22T03:21:56.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>
<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>
<p>使用”横切”技术，AOP把软件系统分为两个部分：<code>核心关注点</code>和<code>横切关注点</code>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>
<h3 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h3><p>1、横切关注点</p>
<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>
<p>2、切面（aspect）</p>
<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>
<p>3、连接点（joinpoint）</p>
<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>
<p>4、切入点（pointcut）</p>
<p>对连接点进行拦截的定义</p>
<p>5、通知（advice）</p>
<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>
<p>6、目标对象</p>
<p>代理的目标对象</p>
<p>7、织入（weave）</p>
<p>将切面应用到目标对象并导致代理对象创建的过程</p>
<p>8、引入（introduction）</p>
<p>在不修改代码的前提下，引入可以在<code>运行期</code>为类动态地添加一些方法或字段</p>
<h3 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h3><p><code>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</code>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>
<p>1、<code>默认使用Java动态代理来创建AOP代理</code>，这样就可以为任何接口实例创建代理了</p>
<p>2、<code>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</code>，也可强制使用CGLIB</p>
<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>
<p>1、定义普通业务组件</p>
<p>2、定义切入点，一个切入点可能横切多个业务组件</p>
<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>
<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<code>代理对象的方法=增强处理+被代理对象</code>的方法。</p>
<p>下面给出一个Spring AOP的.xml文件模板，名字叫做aop.xml，之后的内容都在aop.xml上进行扩展：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h3 id="基于Spring的AOP简单实现"><a href="#基于Spring的AOP简单实现" class="headerlink" title="基于Spring的AOP简单实现"></a>基于Spring的AOP简单实现</h3><p>注意一下，在讲解之前，说明一点：使用Spring AOP，要成功运行起代码，只用Spring提供给开发者的jar包是不够的，请额外上网下载两个jar包：</p>
<p>1、aopalliance.jar</p>
<p>2、aspectjweaver.jar</p>
<p>如果是maven项目的话就要在pom.xml中加:</p>
<p>1、spring-aop</p>
<p>2、spring-aspects</p>
<p>开始讲解用Spring AOP的XML实现方式，先定义一个接口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface HelloWorld</div><div class="line">&#123;</div><div class="line">    void printHelloWorld();</div><div class="line">    void doPrint();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义两个接口实现类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class HelloWorldImpl1 implements HelloWorld</div><div class="line">&#123;</div><div class="line">    public void printHelloWorld()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Enter HelloWorldImpl1.printHelloWorld()&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void doPrint()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Enter HelloWorldImpl1.doPrint()&quot;);</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class HelloWorldImpl2 implements HelloWorld</div><div class="line">&#123;</div><div class="line">    public void printHelloWorld()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Enter HelloWorldImpl2.printHelloWorld()&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void doPrint()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Enter HelloWorldImpl2.doPrint()&quot;);</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>横切关注点，这里是打印时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class TimeHandler</div><div class="line">&#123;</div><div class="line">    public void printTime()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有这三个类就可以实现一个简单的Spring AOP了，看一下aop.xml的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class="line">        </div><div class="line">        &lt;bean id=&quot;helloWorldImpl1&quot; class=&quot;com.xrq.aop.HelloWorldImpl1&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;helloWorldImpl2&quot; class=&quot;com.xrq.aop.HelloWorldImpl2&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class="line">        </div><div class="line">        &lt;aop:config&gt;</div><div class="line">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</div><div class="line">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class="line">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class="line">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class="line">            &lt;/aop:aspect&gt;</div><div class="line">        &lt;/aop:config&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>写一个main函数调用一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)</div><div class="line">&#123;</div><div class="line">    ApplicationContext ctx = </div><div class="line">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</div><div class="line">        </div><div class="line">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl1&quot;);</div><div class="line">    HelloWorld hw2 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl2&quot;);</div><div class="line">    hw1.printHelloWorld();</div><div class="line">    System.out.println();</div><div class="line">    hw1.doPrint();</div><div class="line">    </div><div class="line">    System.out.println();</div><div class="line">    hw2.printHelloWorld();</div><div class="line">    System.out.println();</div><div class="line">    hw2.doPrint();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="运行结果为："><a href="#运行结果为：" class="headerlink" title="运行结果为："></a>运行结果为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CurrentTime = 1446129611993</div><div class="line">Enter HelloWorldImpl1.printHelloWorld()</div><div class="line">CurrentTime = 1446129611993</div><div class="line"></div><div class="line">CurrentTime = 1446129611994</div><div class="line">Enter HelloWorldImpl1.doPrint()</div><div class="line">CurrentTime = 1446129611994</div><div class="line"></div><div class="line">CurrentTime = 1446129611994</div><div class="line">Enter HelloWorldImpl2.printHelloWorld()</div><div class="line">CurrentTime = 1446129611994</div><div class="line"></div><div class="line">CurrentTime = 1446129611994</div><div class="line">Enter HelloWorldImpl2.doPrint()</div><div class="line">CurrentTime = 1446129611994</div></pre></td></tr></table></figure>
<p>看到给HelloWorld接口的两个实现类的所有方法都加上了代理，代理内容就是打印时间</p>
<h3 id="基于Spring的AOP使用其他细节"><a href="#基于Spring的AOP使用其他细节" class="headerlink" title="基于Spring的AOP使用其他细节"></a>基于Spring的AOP使用其他细节</h3><p>1、增加一个横切关注点，打印日志，Java类为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class LogHandler</div><div class="line">&#123;</div><div class="line">    public void LogBefore()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Log before method&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void LogAfter()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Log after method&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>aop.xml配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class="line">        </div><div class="line">        &lt;bean id=&quot;helloWorldImpl1&quot; class=&quot;com.xrq.aop.HelloWorldImpl1&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;helloWorldImpl2&quot; class=&quot;com.xrq.aop.HelloWorldImpl2&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;logHandler&quot; class=&quot;com.xrq.aop.LogHandler&quot; /&gt;</div><div class="line">        </div><div class="line">        &lt;aop:config&gt;</div><div class="line">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot; order=&quot;1&quot;&gt;</div><div class="line">                &lt;aop:pointcut id=&quot;addTime&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class="line">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;</div><div class="line">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;</div><div class="line">            &lt;/aop:aspect&gt;</div><div class="line">            &lt;aop:aspect id=&quot;log&quot; ref=&quot;logHandler&quot; order=&quot;2&quot;&gt;</div><div class="line">                &lt;aop:pointcut id=&quot;printLog&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class="line">                &lt;aop:before method=&quot;LogBefore&quot; pointcut-ref=&quot;printLog&quot; /&gt;</div><div class="line">                &lt;aop:after method=&quot;LogAfter&quot; pointcut-ref=&quot;printLog&quot; /&gt;</div><div class="line">            &lt;/aop:aspect&gt;</div><div class="line">        &lt;/aop:config&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>测试类不变，打印结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CurrentTime = 1446130273734</div><div class="line">Log before method</div><div class="line">Enter HelloWorldImpl1.printHelloWorld()</div><div class="line">Log after method</div><div class="line">CurrentTime = 1446130273735</div><div class="line"></div><div class="line">CurrentTime = 1446130273736</div><div class="line">Log before method</div><div class="line">Enter HelloWorldImpl1.doPrint()</div><div class="line">Log after method</div><div class="line">CurrentTime = 1446130273736</div><div class="line"></div><div class="line">CurrentTime = 1446130273736</div><div class="line">Log before method</div><div class="line">Enter HelloWorldImpl2.printHelloWorld()</div><div class="line">Log after method</div><div class="line">CurrentTime = 1446130273736</div><div class="line"></div><div class="line">CurrentTime = 1446130273737</div><div class="line">Log before method</div><div class="line">Enter HelloWorldImpl2.doPrint()</div><div class="line">Log after method</div><div class="line">CurrentTime = 1446130273737</div></pre></td></tr></table></figure></p>
<p>要想让logHandler在timeHandler前使用有两个办法：</p>
<p>（1）aspect里面有一个order属性，order属性的数字就是横切关注点的顺序</p>
<p>（2）把logHandler定义在timeHandler前面，Spring默认以aspect的定义顺序作为织入顺序</p>
<p>2、我只想织入接口中的某些方法</p>
<p>修改一下pointcut的expression就好了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class="line">        </div><div class="line">        &lt;bean id=&quot;helloWorldImpl1&quot; class=&quot;com.xrq.aop.HelloWorldImpl1&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;helloWorldImpl2&quot; class=&quot;com.xrq.aop.HelloWorldImpl2&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class="line">        &lt;bean id=&quot;logHandler&quot; class=&quot;com.xrq.aop.LogHandler&quot; /&gt;</div><div class="line">        </div><div class="line">        &lt;aop:config&gt;</div><div class="line">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot; order=&quot;1&quot;&gt;</div><div class="line">                &lt;aop:pointcut id=&quot;addTime&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.print*(..))&quot; /&gt;</div><div class="line">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;</div><div class="line">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;</div><div class="line">            &lt;/aop:aspect&gt;</div><div class="line">            &lt;aop:aspect id=&quot;log&quot; ref=&quot;logHandler&quot; order=&quot;2&quot;&gt;</div><div class="line">                &lt;aop:pointcut id=&quot;printLog&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.do*(..))&quot; /&gt;</div><div class="line">                &lt;aop:before method=&quot;LogBefore&quot; pointcut-ref=&quot;printLog&quot; /&gt;</div><div class="line">                &lt;aop:after method=&quot;LogAfter&quot; pointcut-ref=&quot;printLog&quot; /&gt;</div><div class="line">            &lt;/aop:aspect&gt;</div><div class="line">        &lt;/aop:config&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到<strong>expression字段</strong>，表示timeHandler<code>只会</code>织入HelloWorld接口print开头的方法，logHandler<code>只会</code>织入HelloWorld接口do开头的方法.</p>
<p>3、强制使用CGLIB生成代理</p>
<p>前面说过Spring使用动态代理或是CGLIB生成代理是有规则的，高版本的Spring会自动选择是使用动态代理还是CGLIB生成代理内容，当然我们也可以强制使用CGLIB生成代理，那就是<aop:config>里面有一个”proxy-target-class”属性，这个属性值如果被设置为true，那么<code>基于类</code>的代理将起作用，如果proxy-target-class被设置为false或者这个属性被省略，那么<code>基于接口</code>的代理将起作用</aop:config></p>
<h5 id="原理区别："><a href="#原理区别：" class="headerlink" title="原理区别："></a>原理区别：</h5><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP </div><div class="line">2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP </div><div class="line">3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</div></pre></td></tr></table></figure></p>
<h3 id="原文地址-点我"><a href="#原文地址-点我" class="headerlink" title="原文地址:点我"></a>原文地址:<a href="http://blog.csdn.net/caomiao2006/article/details/51295158" target="_blank" rel="external">点我</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h2&gt;&lt;p&gt;AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented P
    
    </summary>
    
      <category term="Spring-AOP" scheme="http://scorpiocc.cn/categories/Spring-AOP/"/>
    
    
      <category term="Spring" scheme="http://scorpiocc.cn/tags/Spring/"/>
    
      <category term="AOP" scheme="http://scorpiocc.cn/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Next主题侧边栏自定义修改</title>
    <link href="http://scorpiocc.cn/2017/05/17/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%BE%A7%E8%BE%B9%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%AE%E6%94%B9/"/>
    <id>http://scorpiocc.cn/2017/05/17/Hexo博客教程/Hexo的Next主题侧边栏自定义修改/</id>
    <published>2017-05-16T16:00:00.000Z</published>
    <updated>2017-05-17T04:35:10.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next主题</a>的强大我就不多说了。侧边栏的标题和网站title标题相同，导致不能<code>自定义</code>。然后我就想着两者能不能分开，本文仅仅探讨<code>个人想法</code>。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-4fd85f3b8b2480e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题自定义"></p>
<blockquote>
<p>如图所示。原版左边2个框是全部获取的title值。但是如何自定义获取呢。就要改源码。</p>
<p>首先右击<a href="http://scorpiocc.cn">做自己的太阳</a><code>举例</code>点击检查，查看源码发现div标签和class命名</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-31d15896bdc0c955.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看源码"></p>
<blockquote>
<p>然后我们就是根据这个字符去主题下搜索。windows是<code>默认只搜索文件名</code>，所以要设置一下，打开计算机，选择工具，文件夹选项。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-5b431b7a4b6573a3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件夹选项"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-232e679bf52acab2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改搜索设置"></p>
<blockquote>
<p>搜索完然后我们查找到在<code>themes\next\layout\_partials\header.swig</code>文件。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-8edaad280f222ed8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改源码"></p>
<blockquote>
<p>修改成我们想要的字段，当然我们也可以新建字段，<code>自定义内容</code>。目前<a href="http://scorpiocc.cn">本人博客</a>主题是<code>Pisces主题</code>。如图是我修改后的样子。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-6b4c0224f763505b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Scorpio_cc的博客"></p>
<blockquote>
<p>修改原理都一样，剩下来的都请大家自己探寻把。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Next主题&lt;/a&gt;的强大我就不多说了。侧边栏的标题和网站title标题相同，导
    
    </summary>
    
      <category term="Hexo 博客教程" scheme="http://scorpiocc.cn/categories/Hexo-%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://scorpiocc.cn/tags/Hexo/"/>
    
      <category term="Next主题" scheme="http://scorpiocc.cn/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java集合体系总结</title>
    <link href="http://scorpiocc.cn/2017/05/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E3%80%90Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%91Java%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://scorpiocc.cn/2017/05/05/Java基础知识/【Java基础知识】Java集合体系总结/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-16T07:41:11.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Collection-单列集合"><a href="#一、Collection-单列集合" class="headerlink" title="一、Collection(单列集合)"></a>一、Collection(单列集合)</h3><h5 id="List-有序-可重复"><a href="#List-有序-可重复" class="headerlink" title="List 有序 可重复"></a>List 有序 可重复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList    底层是数组      查找快，增删慢     线程不安全，效率高</div><div class="line">LinkedList   底层是链表      查找慢，增删快</div><div class="line">Vector       底层是数组      查找快，增删慢     线程安全，效率低</div></pre></td></tr></table></figure>
<h5 id="Set-无序-不可重复"><a href="#Set-无序-不可重复" class="headerlink" title="Set  无序  不可重复"></a>Set  无序  不可重复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HashSet    底层是哈希表</div><div class="line">                如何保证元素的唯一性</div><div class="line">                重写元素的hashcode和equals方法</div><div class="line">                    hashcode相同    判断equals方法  返回true 不填加</div><div class="line">                                                   返回false 添加</div><div class="line">                    hashcode不相同  直接添加</div><div class="line">                                                </div><div class="line">TreeSet    底层是二叉树</div><div class="line">                    如何保证元素的唯一性和排序</div><div class="line">                    1、自然排序(元素具备比较特性)   ----实现Comparable接口</div><div class="line">                    2、使用排序器(集合具备比较特性) ---- 实现Comparator接口</div></pre></td></tr></table></figure>
<h3 id="二、Map-双列集合-数据结构只针对键有效"><a href="#二、Map-双列集合-数据结构只针对键有效" class="headerlink" title="二、Map(双列集合)     数据结构只针对键有效"></a>二、Map(双列集合)     数据结构只针对键有效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HashMap    底层是哈希表</div><div class="line">                     如何保证键的唯一性</div><div class="line">                     重写元素的hashcode和equals方法</div><div class="line">                    hashcode相同    判断equals方法  返回true 不填加</div><div class="line">                                                   返回false 添加</div><div class="line">                    hashcode不相同  直接添加</div><div class="line">                    </div><div class="line">TreeMap     底层是二叉树</div><div class="line">                如何保证键的唯一性和排序</div><div class="line">                1、自然排序(元素具备比较特性)   ----实现Comparable接口</div><div class="line">                2、使用排序器(集合具备比较特性)  ---- 实现Comparator接口</div></pre></td></tr></table></figure>
<h4 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Collection</div><div class="line">        add(Object obj) remove(Object obj) contains(obj)  size() iterator()</div><div class="line">        List   add(int index,Object obj)  remove(int index)  get(index)  set</div><div class="line"></div><div class="line">Set  </div><div class="line">Map </div><div class="line">        put(key,value)  remove(key) get(key) containsValue(value)  containsKey(key)</div><div class="line">        get(key) keySet() values() entrySet()</div></pre></td></tr></table></figure>
<h4 id="3、遍历"><a href="#3、遍历" class="headerlink" title="3、遍历"></a>3、遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List </div><div class="line"></div><div class="line">    1、迭代器      使用迭代器遍历集合时，不能通过集合对象去修改集合元素</div><div class="line">    2、for循环</div><div class="line">    3、增强for循环</div><div class="line">    仅仅是遍历集合，任选一种，</div><div class="line">    如果要对集合元素进行操作，使用后面两种</div><div class="line">    跟集合索引相关的操作，使用for循环</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Set</div><div class="line">    1、迭代器</div><div class="line">    2、增强for循环</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map</div><div class="line">    1、获取键集合，根据键找值</div><div class="line">    2、获取键值对集合，根据键值对对象获取键和值</div></pre></td></tr></table></figure>
<h4 id="4、怎么选择"><a href="#4、怎么选择" class="headerlink" title="4、怎么选择"></a>4、怎么选择</h4><h5 id="先看有没有对应关系-是否需要键值对"><a href="#先看有没有对应关系-是否需要键值对" class="headerlink" title="先看有没有对应关系(是否需要键值对)"></a>先看有没有对应关系(是否需要键值对)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">有    Map</div><div class="line">    是否需要对键排序                  需要  TreeMap</div><div class="line">                                    不需要 HashMap</div><div class="line">      </div><div class="line">    </div><div class="line">没有  Collection</div><div class="line">    是否要求元素唯一</div><div class="line">      是   Set                    不是 List</div><div class="line">        是否对元素进行排序           增删多，查找少  LinkedList</div><div class="line">        是  TreeSet                 增删少，查找多  ArrayList或者Vector</div><div class="line">        不是 HashSet                如果线程安全  Vector</div><div class="line">                                    不需要保证线程安全 ArrayList</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Collection-单列集合&quot;&gt;&lt;a href=&quot;#一、Collection-单列集合&quot; class=&quot;headerlink&quot; title=&quot;一、Collection(单列集合)&quot;&gt;&lt;/a&gt;一、Collection(单列集合)&lt;/h3&gt;&lt;h5 id=&quot;Lis
    
    </summary>
    
      <category term="Java 基础知识" scheme="http://scorpiocc.cn/categories/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Java基础知识" scheme="http://scorpiocc.cn/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven警告解决:Using platform encoding （UTF-8 actually）</title>
    <link href="http://scorpiocc.cn/2017/05/04/Java%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/Maven%E8%AD%A6%E5%91%8A%E8%A7%A3%E5%86%B3Using%20platform%20encoding%20(UTF-8%20actually)/"/>
    <id>http://scorpiocc.cn/2017/05/04/Java后台开发/Maven警告解决Using platform encoding (UTF-8 actually)/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-05-15T07:46:32.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行Maven-Install打包的时候，提示以下警告信息："><a href="#执行Maven-Install打包的时候，提示以下警告信息：" class="headerlink" title="执行Maven Install打包的时候，提示以下警告信息："></a>执行Maven Install打包的时候，提示以下警告信息：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</div></pre></td></tr></table></figure>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>打开项目属性》Resources，按下图修改。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-c95128cccfb33d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改默认编码"></p>
<p><strong>保存后重新执行Maven Install</strong></p>
<p>发现警告依然存在，原来是理解错误错误了，应该修改Maven的配置文件中关于编码的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;encoding&gt;utf-8&lt;/encoding&gt;：</div></pre></td></tr></table></figure>
<p><strong>完整示例：pom.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;3.0&lt;/version&gt;</div><div class="line">            &lt;configuration&gt;</div><div class="line">            &lt;encoding&gt;utf-8&lt;/encoding&gt;</div><div class="line">            &lt;source&gt;1.8&lt;/source&gt;</div><div class="line">            &lt;target&gt;1.8&lt;/target&gt;</div><div class="line">        &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<h2 id="如果还是存在警告，则需要在中添加标签："><a href="#如果还是存在警告，则需要在中添加标签：" class="headerlink" title="如果还是存在警告，则需要在中添加标签："></a>如果还是存在警告，则需要在<project>中添加<properties>标签：</properties></project></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">         &lt;project.build.sourceEncoding&gt;</div><div class="line">             UTF-8</div><div class="line">         &lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure>
<p><strong>最终 Maven Install 警告就消失了。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2759587-8c313c76948784b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编码警告消失"></p>
<blockquote>
<p>本文作者： Scorpip_cc</p>
<p>本文链接： <a href="http://scorpiocc.cn/2017/05/04/Java%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/Maven%E8%AD%A6%E5%91%8A%E8%A7%A3%E5%86%B3Using%20platform%20encoding%20（UTF-8 actually）">原文博客地址</a></p>
<p>版权声明： 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行Maven-Install打包的时候，提示以下警告信息：&quot;&gt;&lt;a href=&quot;#执行Maven-Install打包的时候，提示以下警告信息：&quot; class=&quot;headerlink&quot; title=&quot;执行Maven Install打包的时候，提示以下警告信息：&quot;&gt;
    
    </summary>
    
      <category term="Java 报错解决" scheme="http://scorpiocc.cn/categories/Java-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Java后台开发" scheme="http://scorpiocc.cn/tags/Java%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
      <category term="Maven" scheme="http://scorpiocc.cn/tags/Maven/"/>
    
  </entry>
  
</feed>
